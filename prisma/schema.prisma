generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  bio         String?
  followers   Follower[] @relation("followers")
  following   Follower[] @relation("following")
  ratings     Rating[]
  whiteGames  Game[] @relation("WhiteUser")
  blackGames  Game[] @relation("BlackUser")
  tactics     UserTactic[]
  openings    UserOpening[]
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("followers", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Bullet, Blitz, etc.
  value     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Game {
  id           String   @id @default(cuid())
  whiteId      String
  blackId      String
  white        User @relation("WhiteUser", fields: [whiteId], references: [id])
  black        User @relation("BlackUser", fields: [blackId], references: [id])
  whiteRating  Int
  blackRating  Int
  type         String   // Bullet, Blitz, etc.
  isRated      Boolean  @default(true)
  playedAt     DateTime @default(now())
  pgn          String
  openingNr    Int
  result       String   // win/loss/draw
}

model Tactic {
  id          Int           @id
  fen         String        // Starting position
  rating      Int           // Estimated difficulty
  openingNr   Int           // Where tactic originates from
  moveNr      Int           // When the tactic occurs in the game
  userTactic  UserTactic[]
}

model UserTactic {
  id         String    @id @default(cuid())
  userId     String
  tacticId   Int
  solved     Boolean?  @default(false)
  finished   DateTime? @default(now())
  user       User      @relation(fields: [userId], references: [id])
  tactic     Tactic    @relation(fields: [tacticId], references: [id])
}

model UserOpening {
  id             String    @id @default(cuid())
  userId         String
  openingNr      Int       // 0â€“959
  color          String    // "white" or "black"
  pgn            String
  evalCp         Int?      // Final eval in centipawns (e.g. +32, -10)
  finished       DateTime?  @default(now())
  user           User      @relation(fields: [userId], references: [id])
}
